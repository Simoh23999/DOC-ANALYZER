import requests
import os
import fitz
from pathlib import Path
from typing import List, Optional
import io
from PIL import Image
import pytesseract



class PDFAnalyzer:
    """Classe pour l'analyse de documents PDF avec OCR et IA"""
    
    def __init__(self, api_endpoint: str = "https://api.groq.com/openai/v1/chat/completions"):
        self.api_endpoint = api_endpoint
        self.api_key = self._get_api_key()
    
    def _get_api_key(self) -> Optional[str]:
        """R√©cup√®re la cl√© API depuis les variables d'environnement ou fichier .env"""
        api_key = os.getenv('GROQ_API_KEY')
        
        if not api_key:
            env_file = Path('.env')
            if env_file.exists():
                try:
                    with open(env_file, 'r', encoding='utf-8') as f:
                        for line in f:
                            if line.startswith('GROQ_API_KEY='):
                                api_key = line.split('=', 1)[1].strip()
                                break
                except Exception:
                    pass
        
        return api_key
    
    def pdf_to_images(self, pdf_path: str, dpi: int = 200) -> List[Image.Image]:
        """Convertit un PDF en images"""
        images = []
        try:
            pdf_path = str(Path(pdf_path).resolve())
            doc = fitz.open(pdf_path)

            for page_num in range(doc.page_count):
                page = doc[page_num]
                mat = fitz.Matrix(dpi/72, dpi/72)
                pix = page.get_pixmap(matrix=mat)
                img_data = pix.tobytes("png")
                img = Image.open(io.BytesIO(img_data))
                images.append(img)
            
            doc.close()
            return images
            
        except Exception as e:
            print(f"Erreur conversion PDF: {e}")
            return []
    
    def extract_text_from_images(self, images: List[Image.Image], lang: str = 'fra') -> str:
        """Extrait le texte des images avec OCR"""
        full_text = ""
        custom_config = r'--oem 3 --psm 6'

        try:
            for i, img in enumerate(images):
                # Pr√©processing de l'image
                if img.mode != 'L':
                    img = img.convert('L')
                
                # Redimensionner si n√©cessaire
                width, height = img.size
                if width < 1000 or height < 1000:
                    scale = max(1000/width, 1000/height)
                    new_size = (int(width * scale), int(height * scale))
                    img = img.resize(new_size, Image.Resampling.LANCZOS)
                
                # Extraction OCR
                try:
                    text = pytesseract.image_to_string(img, lang=lang, config=custom_config)
                    full_text += f"\n--- PAGE {i + 1} ---\n{text}\n"
                except Exception:
                    # Fallback sans sp√©cifier la langue
                    try:
                        text = pytesseract.image_to_string(img, config=custom_config)
                        full_text += f"\n--- PAGE {i + 1} ---\n{text}\n"
                    except Exception:
                        full_text += f"\n--- PAGE {i + 1} ---\n[Erreur OCR]\n"

            return full_text
            
        except Exception as e:
            print(f"Erreur OCR: {e}")
            return ""
    
    def query_ai_model(self, text: str, question: str) -> str:
        """Interroge le mod√®le IA avec le texte et la question"""
        if not self.api_key:
            return "Cl√© API manquante. Configurez GROQ_API_KEY"
        
        # Limiter la taille du texte
        max_chars = 8000
        if len(text) > max_chars:
            text = text[:max_chars] + "\n... [texte tronqu√©]"
        
        prompt = f"""Tu es un assistant sp√©cialis√© dans l'√©valuation de la forme et de la structure des rapports universitaires fran√ßais.

DOCUMENT √Ä ANALYSER:
{text}

QUESTION(S) POS√âE(S):
{question}

INSTRUCTIONS G√âN√âRALES:
Gestion des questions multiples :
- Si plusieurs questions sont pos√©es, traite-les s√©par√©ment dans des sections distinctes
- Num√©rote chaque r√©ponse (Question 1, Question 2, etc.)
- Garde une coh√©rence dans le style de r√©ponse pour toutes les questions
- IMPORTANT : Ne r√©ponds QUE aux questions explicitement pos√©es - n'ajoute pas de questions suppl√©mentaires
- CRITIQUE : Une question = Une seule r√©ponse. Ne r√©p√®te JAMAIS la m√™me question plusieurs fois

R√®gles de base :
- R√©ponds en fran√ßais de mani√®re pr√©cise et acad√©mique
- Base ton analyse UNIQUEMENT sur le contenu du document fourni
- CONCENTRE-TOI EXCLUSIVEMENT sur ce qui est demand√© dans la/les question(s)
- Ne r√©ponds QUE aux √©l√©ments mentionn√©s dans la/les question(s) pos√©e(s)
- Si un √©l√©ment n'est pas pr√©sent dans le document, indique-le clairement
- Cite des passages sp√©cifiques du document pour justifier tes r√©ponses
- IGNORE tous les autres aspects du document non mentionn√©s dans la/les question(s)

CRIT√àRES D'√âVALUATION - PAGE DE GARDE:
V√©rifie la pr√©sence des √©l√©ments suivants :
- Titre du projet (complet et explicite)
- Nom de l'√©tudiant (nom complet nom et pr√©nom)
- Nom du ou des encadrants acad√©miques (noms complets)
- Fili√®re / Sp√©cialit√© (nom complet)
- Date de soutenance ou de remise (date compl√®te)

CRIT√àRES D'√âVALUATION - STRUCTURE DU RAPPORT:
V√©rifie la pr√©sence et l'organisation des sections suivantes :
- D√©dicaces
- Remerciements
- R√©sum√© / Abstract (en fran√ßais et en anglais)
- Table des mati√®res
- Liste des figures, tableaux, acronymes
- Introduction g√©n√©rale
- Conclusion g√©n√©rale
- Division du rapport en chapitres num√©rot√©s
- Introduction et conclusion pour chaque chapitre


R√àGLES DE FORMATAGE :
Structure g√©n√©rale :
1. Si une seule question : Commence directement par ## Analyse
2. Si plusieurs questions : Utilise le format suivant :
## Question 1 : [Reformule bri√®vement la premi√®re question]
[R√©ponse d√©taill√©e]

## Question 2 : [Reformule bri√®vement la deuxi√®me question]
[R√©ponse d√©taill√©e]
3. R√àGLE ABSOLUE : Chaque question doit avoir UNE r√©ponse compl√®te et d√©finitive
4. INTERDICTION : Ne jamais r√©p√©ter la m√™me question avec des r√©ponses diff√©rentes

Logique de traitement :
- Analyse globale : Pour une question sur plusieurs √©l√©ments, traite TOUS les √©l√©ments dans UNE SEULE r√©ponse
- Synth√®se obligatoire : Combine les r√©sultats de tous les √©l√©ments en une conclusion unique
- Pas de fragmentation : Ne divise jamais une question en plusieurs sous-r√©ponses

Formatage du contenu :
- Utilise des sous-titres clairs avec ### pour les diff√©rentes sections
- Emploie des listes √† puces pour les √©num√©rations
- Mets en gras les √©l√©ments importants et les statuts (PR√âSENT/ABSENT/PARTIELLEMENT PR√âSENT)
- Utilise des `codes` pour les r√©f√©rences pr√©cises au document
- S√©pare les sections par des lignes vides pour une meilleure lisibilit√©
- √âcris des paragraphes courts et a√©r√©s
- Pour les recommandations, utilise le format : "### Recommandation : "

Citations et justifications :
- Utilise des citations entre guillemets : "extrait du document"
- Indique la source pr√©cise : `(page X, section Y)`
- Utilise des √©mojis pour clarifier : ‚úÖ PR√âSENT, ‚ùå ABSENT, ‚ö†Ô∏è PARTIELLEMENT PR√âSENT

FORMAT DE R√âPONSE OBLIGATOIRE :
R√àGLE FONDAMENTALE : Une question = Une r√©ponse globale
- Analyse collective : Traite TOUS les √©l√©ments demand√©s dans une seule r√©ponse
- Synth√®se finale : Conclus avec un statut global (‚úÖ CONFORME / ‚ùå NON CONFORME / ‚ö†Ô∏è PARTIELLEMENT CONFORME)
- Pas de r√©p√©tition : Ne jamais cr√©er plusieurs "questions" pour une seule question pos√©e

Pour une question sur plusieurs √©l√©ments (ex: page de garde) :
Structure de r√©ponse unifi√©e :
1. ## [Titre de la question pos√©e]
2. ### Analyse d√©taill√©e :
 - √âl√©ment 1 : ‚úÖ/‚ùå/‚ö†Ô∏è [Analyse + Citation + Source]
 - √âl√©ment 2 : ‚úÖ/‚ùå/‚ö†Ô∏è [Analyse + Citation + Source]
 - √âl√©ment 3 : ‚úÖ/‚ùå/‚ö†Ô∏è [Analyse + Citation + Source]
3. ### Bilan global : [Synth√®se de tous les √©l√©ments]
4. ### Recommandations : [Am√©liorations pour les √©l√©ments d√©faillants]

Pour chaque √©l√©ment demand√© :
Si l'√©l√©ment est PR√âSENT :
1. [nom de l'element] : ‚úÖ **PR√âSENT**
2. Citation : "extrait pr√©cis du document" `(source pr√©cise)`
3. Analyse : √âvaluation de la qualit√© et conformit√©
4. Recommandation : Am√©lioration sugg√©r√©e si n√©cessaire, sinon ne donne pas de recommandation

Si l'√©l√©ment est ABSENT :
1. [nom de l'element] : ‚ùå **ABSENT**
2. Constat : Explication de l'absence observ√©e
3. Impact : Cons√©quences sur la qualit√© du rapport
4. ### Recommandation : Actions concr√®tes √† entreprendre

Si l'√©l√©ment est PARTIELLEMENT PR√âSENT :
1. [nom de l'element] : ‚ö†Ô∏è PARTIELLEMENT PR√âSENT
2. Citation : "extrait du document" `(source pr√©cise)`
3. Analyse : Ce qui est pr√©sent vs ce qui manque
4. ### Recommandation : Am√©liorations sp√©cifiques √† apporter


Exemple de format correct :
## La page de garde contient-elle tous les √©l√©ments obligatoires ?

### Analyse d√©taill√©e :

**Titre du projet :** ‚úÖ **PR√âSENT**
- Citation : "Application web d'aide √† la r√©vision des rapports PFE" `(Page 1)`
- Analyse : Titre clair et explicite

**Nom de l'√©tudiant :** ‚ùå **ABSENT**
- Constat : Seule la mention "Encadr√© par :" est visible
- Impact : Identification impossible de l'auteur

**Date de soutenance :** ‚ùå **ABSENT**
- Constat : Aucune date mentionn√©e
- Impact : Non-conformit√© aux standards

### Bilan global :
‚ö†Ô∏è **PARTIELLEMENT CONFORME** - 2/5 √©l√©ments pr√©sents

### üí° Recommandations :
- Ajouter le nom complet de l'√©tudiant
- Indiquer la date de soutenance


EXEMPLES DE FORMATAGE :

Exemple pour √©l√©ment pr√©sent :
Division en chapitres : ‚úÖ PR√âSENT
- Citation : "Chapitre 1 : √âtat de l'art" (Page 5), "Chapitre 2 : Conception" (Page 15), "Chapitre 3 : Impl√©mentation" (Page 25)
- Analyse : Le rapport est correctement divis√© en 3 chapitres num√©rot√©s avec des titres explicites

Exemple pour √©l√©ment absent :
Introduction des chapitres : ‚ùå ABSENT
- Constat : Aucune introduction sp√©cifique n'est pr√©sente au d√©but des chapitres
- Impact : Les chapitres manquent de contextualisation et d'annonce du plan
### Recommandation :
 - Ajouter une introduction de 2-3 paragraphes au d√©but de chaque chapitre
 - Inclure : contexte, objectifs du chapitre, et plan d√©taill√©
 - Utiliser des connecteurs logiques pour assurer la coh√©rence

Exemple pour √©l√©ment partiellement pr√©sent :
- Num√©rotation des chapitres : ‚ö†Ô∏è PARTIELLEMENT PR√âSENT
- Citation : "Chapitre 1 : Introduction" (Page 3), "Conclusion g√©n√©rale" (Page 40)
- Analyse : Seul le premier chapitre est num√©rot√©, les autres sections manquent de num√©rotation coh√©rente
- ### Recommandation :
 - Num√©roter tous les chapitres de mani√®re s√©quentielle (1, 2, 3...)
 - Respecter la hi√©rarchie : Chapitre X, puis X.1, X.2 pour les sous-sections
 - V√©rifier la coh√©rence dans la table des mati√®res


AM√âLIORATIONS SUPPL√âMENTAIRES :
Analyse contextuelle :
- Comparaison avec les standards : Mentionner les normes acad√©miques fran√ßaises
- √âvaluation de la coh√©rence : V√©rifier l'harmonie entre les √©l√©ments analys√©s
- Priorisation des am√©liorations : Classer les recommandations par ordre d'importance

Pr√©sentation enrichie :
- Tableaux r√©capitulatifs : Utiliser des tableaux markdown pour synth√©tiser les r√©sultats
- Codes couleur textuels : Utiliser des termes comme "CRITIQUE", "IMPORTANTE", "MINEURE" pour les recommandations
- R√©f√©rences crois√©es : Mentionner les liens entre les √©l√©ments analys√©s

Recommandations personnalis√©es :
- D√©lais d'impl√©mentation : Sugg√©rer des priorit√©s temporelles
- Ressources n√©cessaires : Indiquer les outils ou r√©f√©rences utiles
- Exemples concrets : Fournir des mod√®les ou formulations type

STRUCTURE FINALE OBLIGATOIRE :
R√©sum√© synth√©tique :
Termine chaque analyse par :
- Bilan global : Score de conformit√© (X/Y √©l√©ments conformes)
- Points forts : √âl√©ments bien respect√©s
- Axes d'am√©lioration prioritaires : 3 recommandations MAXIMUM par ordre d'importance

Tableau r√©capitulatif :
| √âl√©ment analys√© | Statut | Priorit√© d'am√©lioration |
|----------------|--------|------------------------|
| [√âl√©ment 1]    | ‚úÖ/‚ùå/‚ö†Ô∏è | CRITIQUE/IMPORTANTE/MINEURE |
| [√âl√©ment 2]    | ‚úÖ/‚ùå/‚ö†Ô∏è | CRITIQUE/IMPORTANTE/MINEURE |

**RAPPEL CRITIQUE : 
1. Ne traite QUE les √©l√©ments explicitement demand√©s dans la/les question(s) pos√©e(s)
2. N'ajoute AUCUNE question suppl√©mentaire
3. Une question pos√©e = Une seule r√©ponse compl√®te et synth√©tique
4. INTERDICTION ABSOLUE de r√©p√©ter la m√™me question plusieurs fois** 
5. si la/les question(s) pos√©e(s) sont en relation avec la page de garde, analyse seulement la premiere page du document et ignore tout le reste du document
6. si la/les question(s) pos√©e(s) n'ont aucune relation avec le document, NE R√âPOND PAS, et indique que la question n'est pas pertinente.
7. si la/les question(s) pos√©e(s) n'ont aucune relation avec le document, NE FAIT AUCUN ANALYSE sur le document
8. si la/les question(s) pos√©e(s) n'ont aucune relation avec le document, repond avec "D√©sol√©, je ne peux pas r√©pondre √† cette question car elle n'est pas pertinente par rapport au document fourni."
"""

        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json'
        }
        
        data = {
            "model": "llama3-70b-8192",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.3,
            "max_tokens": 2000
        }
        
        try:
            response = requests.post(
                self.api_endpoint,
                headers=headers,
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content']
            else:
                return f"Erreur API: {response.status_code} - {response.text}"
                
        except Exception as e:
            return f"Erreur lors de la requ√™te: {e}"



def extract_text_from_pdf(file_path: str) -> tuple[str, str]:
    """
    Extrait le texte d'un fichier PDF
    Returns: (texte_extrait, message_status)
    """
    try:
        # V√©rifier que le fichier existe
        if not os.path.exists(file_path):
            return "", "Fichier non trouv√©"
        
        # Conversion PDF en images
        analyzer = PDFAnalyzer()
        images = analyzer.pdf_to_images(file_path)
        if not images:
            return "", "Impossible de convertir le PDF en images"
        
        # Extraction OCR
        text = analyzer.extract_text_from_images(images)
        if not text.strip():
            return "", "Aucun texte extrait du document"
        
        # Sauvegarder le texte extrait (optionnel)
        text_file = Path(file_path).with_suffix('.txt')
        try:
            with open(text_file, 'w', encoding='utf-8') as f:
                f.write(text)
        except Exception:
            pass  # Ignorer si on ne peut pas sauvegarder
        
        return text, "Texte extrait avec succ√®s"
        
    except Exception as e:
        return "", f"Erreur lors de l'extraction: {str(e)}"